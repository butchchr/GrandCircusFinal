@model GCFinal.MVC.Models.SearchModel

@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>Welcome to What2Pack?</h1>
    <h3>Your source to determine what should be packed based on historical weather data</h3>
</div>


<p>To begin, please enter some basic information about your trip:</p>
@using (@Html.BeginForm("GetWeatherObject", "PackingList", FormMethod.Post))
{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);

    <form class="form-inline">
        <div class="form-group">
            <div class="col-md-2">
                <label>Location:</label>
            </div>
            <div class="col-md-10">
                @Html.EditorFor(location => Model.Location)
                @Html.ValidationMessageFor(location => Model.Location, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-2">
                <label>Start Date:</label>
            </div>
            <div class="col-md-10">
                @Html.EditorFor(startDate => Model.StartDate)
                @Html.ValidationMessageFor(startDate => Model.StartDate, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-2">
                <label>Duration:</label>
            </div>
            <div class="col-md-10">
                @Html.EditorFor(duration => Model.Duration)
                @Html.ValidationMessageFor(duration => Model.Duration, "", new { @class = "text-danger" })
            </div>

        </div>
        <input type="submit" value="Search" />
    </form>
}

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $.validator.unobtrusive.adapters.add('restrictbackdates', ['mindate'], function (options) {
            options.rules['restrictbackdates'] = { mindate: options.params.mindate };
            options.messages['restrictbackdates'] = options.message;
        });

        $.validator.addMethod("restrictbackdates", function (value, element, param) {
            var date = new Date(value);
            var minDate = new Date(param.mindate);
            return date >= minDate;
        });

        $.validator.unobtrusive.adapters.add('restrictmorethanoneyear', ['maxdate'], function (options) {
            options.rules['restrictmorethanoneyear'] = { maxdate: options.params.maxdate };
            options.messages['restrictmorethanoneyear'] = options.message;
        });

        $.validator.addMethod("restrictmorethanoneyear", function (value, element, param) {
            var date = new Date(value);
            var maxDate = new Date(param.maxdate);
            return date <= maxDate;
        });
    </script>

}